apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'com.facebook.react'
apply plugin: 'com.google.gms.google-services'

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

react {
    entryFile = file(['node', '-e', "require('expo/scripts/resolveAppEntry')", projectRoot, 'android', 'absolute'].execute(null, rootDir).text.trim())
    reactNativeDir = new File(['node', '--print', "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
    codegenDir = new File(['node', '--print', "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()

    enableBundleCompression = (findProperty('android.enableBundleCompression') ?: false).toBoolean()
    cliFile = new File(['node', '--print', "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"].execute(null, rootDir).text.trim())
    bundleCommand = 'export:embed'

    autolinkLibrariesWithApp()
}

def enableProguardInReleaseBuilds = (findProperty('android.enableProguardInReleaseBuilds') ?: false).toBoolean()
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'
def hermesEnabled = (findProperty('expo.jsEngine') ?: 'hermes') == 'hermes'

android {
    compileSdk rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    namespace 'com.tripbooking'
    defaultConfig {
        applicationId 'com.tripbooking'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName '1.0.0'
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.debug
            shrinkResources false
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            crunchPngs true
        }
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging true
        }
    }

    androidResources {
        ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~'
    }
}

dependencies {
    implementation 'com.facebook.react:react-android'

    // Firebase BOM (keeps all Firebase libs in sync)
    implementation platform('com.google.firebase:firebase-bom:32.7.2')
    // Firebase Messaging (notifications)
    implementation 'com.google.firebase:firebase-messaging'

    // Expo image formats
    def isGifEnabled = (findProperty('expo.gif.enabled') ?: '') == 'true'
    def isWebpEnabled = (findProperty('expo.webp.enabled') ?: '') == 'true'
    def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: '') == 'true'

    if (isGifEnabled) {
        implementation("com.facebook.fresco:animated-gif:${expoLibs.versions.fresco.get()}")
    }

    if (isWebpEnabled) {
        implementation("com.facebook.fresco:webpsupport:${expoLibs.versions.fresco.get()}")
        if (isWebpAnimatedEnabled) {
            implementation("com.facebook.fresco:animated-webp:${expoLibs.versions.fresco.get()}")
        }
    }

    // Hermes or JSC
    if (hermesEnabled) {
        implementation 'com.facebook.react:hermes-android'
    } else {
        implementation jscFlavor
    }
}
